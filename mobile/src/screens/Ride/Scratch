import React, { useEffect, useRef, useState } from 'react';
import { View } from "react-native";
import { MapScreenProps } from "../RouteProps";
import MapView, { Polyline, Marker } from 'react-native-maps';
import { StyleSheet, Text, Dimensions } from 'react-native';
import { colors } from "../../styles/colors";
import { Button } from "../../components/Button/Button";
import * as Location from 'expo-location';


export const Ride = (props: MapScreenProps) => {
  const [started, setStarted] = useState<boolean>(false);
  const [location, setLocation] = useState<any>(null);
  const [route, setRoute] = useState<any>([]);

  const mapRef = useRef<any>(null);

  /**
   * RECORD BTN
   */
  const fabClick = () => {
    setStarted(!started);
  };

  /**
   * PIN
   */
  useEffect(() => {
    const interval = setInterval(() => {   
      updateLocation(); 
    }, 1000);

    return () => {
      clearInterval(interval);
    }
  }, []);

  const updateLocation = () => {
    (async () => {
      try {
        let { status } = await Location.requestForegroundPermissionsAsync();
        if (status !== 'granted') {
          console.log('Update Location: No rights');
              return;
        }

        let location = await Location.getCurrentPositionAsync({
            accuracy: Location.Accuracy.Balanced,
            enableHighAccuracy: true,
            timeInterval: 5
        });
        
        setLocation(location);
        console.log(location);
      } catch (error) {
        console.log('Update Location: Error', error);
      }
    })();   
  }

  /**
   * Follow Pin
   */
  useEffect(() => {
    goToMyLocation();
  }, [location]);

  const goToMyLocation = async () => {
    if (mapRef && mapRef.current) {
      mapRef.current.animateCamera({center: {"latitude":location.coords.latitude, "longitude": location.coords.longitude}});
    }
  }

  /**
   * Get Coords From Location Object
   */
  const getCoordinatesFromLocation = (location: any) => {
    if (!location?.coords?.longitude) {
      return null;
    }

    return { longitude: location?.coords?.longitude, latitude: location?.coords?.latitude};
  }
  
  /**
   * ROUTE
   */
  useEffect(() => {
    if (started) {
      const coords = getCoordinatesFromLocation(location);
      let tmp = JSON.parse(JSON.stringify(route)); 
      tmp.push(coords);
      setRoute(tmp);
    }
  }, [location]);


  /**
   * Return view
   * ---------------------------------------------------
   */
  return (
     <View style={styles.container}>
      <MapView
        ref={mapRef}
        style={styles.map}
        minZoomLevel={15}
        maxZoomLevel={20}
      >
        <Marker
          coordinate={getCoordinatesFromLocation(location)}
          title="My Marker"
        />

        <Polyline
          coordinates={route}
          strokeColor="#000" // fallback for when `strokeColors` is not supported by the map-provider
          strokeColors={[
            '#7F0000',
            '#00000000', // no color, creates a "long" gradient between the previous and next coordinate
            '#B24112',
            '#E5845C',
            '#238C23',
            '#7F0000'
          ]}
          strokeWidth={6}
        />
      </MapView>

      <View style={styles.fabContainer}>
        <Button
          type={!started ? "fab" : "fabRed"}
          onPress={fabClick}>
          {!started ? "Start" : "Finish"}
        </Button>
      </View>
    </View>
  )
}


const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  map: {
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
  fabContainer: {
    position: 'absolute',
    right: 0,
    left: 0,
    bottom: 100,
    justifyContent: 'center',
    alignItems: 'center'
  },
});

